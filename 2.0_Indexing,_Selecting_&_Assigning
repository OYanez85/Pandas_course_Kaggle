#### Indexing, Selecting & Assigning
### Native accessors
----------------
reviews
--------------
# In Python, we can access the property of an object by accessing it as an attribute.
# Columns in a pandas DataFrame work in much the same way.
# Hence to access the country property of reviews we can use:
reviews.country
-------------
#If we have a Python dictionary, we can access its values using the indexing ([]) operator.
reviews['country']
-------------
reviews['country'][0]
-------------
### Indexing in pandas
# pandas has its own accessor operators, loc and iloc
# iloc uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. loc, meanwhile, indexes inclusively.
# This is particularly confusing when the DataFrame index is a simple numerical list, e.g. 0,...,1000. 
# In this case df.iloc[0:1000] will return 1000 entries, while df.loc[0:1000] return 1001 of them! To get 1000 elements using loc, you will need to go one lower and ask for df.iloc[0:999].

## Index-based selection
reviews.iloc[0]
------------
# To get a column with iloc, we can do the following:
reviews.iloc[:, 0]
-------------
# to select the country column from just the first, second, and third row,
reviews.iloc[:3, 0]
-----------
# to select just the second and third entries
reviews.iloc[1:3, 0]
---------------
# It's also possible to pass a list:
reviews.iloc[[0, 1, 2], 0]
-----------------
# the last five elements of the dataset:
reviews.iloc[-5:]
-----------------
## Label-based selection
----------------
# to get the first entry in reviews
reviews.loc[0, 'country']
-------------------
reviews.loc[:, ['taster_name', 'taster_twitter_handle', 'points']]
---------------------
### Choosing between loc and iloc
## Manipulating the index
reviews.set_index("title")
-------------
## Conditional selection
# checking if each wine is Italian or not:
reviews.country == 'Italy'
---------------
reviews.loc[reviews.country == 'Italy']
---------------
# We also wanted to know which ones are better than average. 
reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)]
--------------------
# Suppose we'll buy any wine that's made in Italy or which is rated above average. For this we use a pipe (|):
reviews.loc[(reviews.country == 'Italy') | (reviews.points >= 90)]
----------------------
# Pandas comes with a few built-in conditional selectors, two of which we will highlight here.
# The first is isin. isin is lets you select data whose value "is in" a list of values. 
# For example, here's how we can use it to select wines only from Italy or France:

reviews.loc[reviews.country.isin(['Italy', 'France'])]
----------------------
# The second is isnull (and its companion notnull). 
# These methods let you highlight values which are (or are not) empty (NaN). 
# For example, to filter out wines lacking a price tag in the dataset, here's what we would do:

reviews.loc[reviews.price.notnull()]
----------------------
## Assigning data
reviews['critic'] = 'everyone'
reviews['critic']
--------------
reviews['index_backwards'] = range(len(reviews), 0, -1)
reviews['index_backwards']
--------------
